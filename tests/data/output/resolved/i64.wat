(module
	(export "add" (func 0))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.add
	)
	(export "sub" (func 1))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.sub
	)
	(export "mul" (func 2))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.mul
	)
	(export "div_s" (func 3))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.div_s
	)
	(export "div_u" (func 4))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.div_u
	)
	(export "rem_s" (func 5))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.rem_s
	)
	(export "rem_u" (func 6))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.rem_u
	)
	(export "and" (func 7))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.and
	)
	(export "or" (func 8))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.or
	)
	(export "xor" (func 9))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.xor
	)
	(export "shl" (func 10))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.shl
	)
	(export "shr_s" (func 11))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.shr_s
	)
	(export "shr_u" (func 12))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.shr_u
	)
	(export "rotl" (func 13))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.rotl
	)
	(export "rotr" (func 14))
	(func (type 0) (param $x i64) (param $y i64) (result i64)
		(local.get 0)
		(local.get 1)
		i64.rotr
	)
	(export "clz" (func 15))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.clz
	)
	(export "ctz" (func 16))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.ctz
	)
	(export "popcnt" (func 17))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.popcnt
	)
	(export "extend8_s" (func 18))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.extend8_s
	)
	(export "extend16_s" (func 19))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.extend16_s
	)
	(export "extend32_s" (func 20))
	(func (type 1) (param $x i64) (result i64)
		(local.get 0)
		i64.extend32_s
	)
	(export "eqz" (func 21))
	(func (type 2) (param $x i64) (result i32)
		(local.get 0)
		i64.eqz
	)
	(export "eq" (func 22))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.eq
	)
	(export "ne" (func 23))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.ne
	)
	(export "lt_s" (func 24))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.lt_s
	)
	(export "lt_u" (func 25))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.lt_u
	)
	(export "le_s" (func 26))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.le_s
	)
	(export "le_u" (func 27))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.le_u
	)
	(export "gt_s" (func 28))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.gt_s
	)
	(export "gt_u" (func 29))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.gt_u
	)
	(export "ge_s" (func 30))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.ge_s
	)
	(export "ge_u" (func 31))
	(func (type 3) (param $x i64) (param $y i64) (result i32)
		(local.get 0)
		(local.get 1)
		i64.ge_u
	)
	(type (func (param i64 i64) (result i64)))
	(type (func (param i64) (result i64)))
	(type (func (param i64) (result i32)))
	(type (func (param i64 i64) (result i32)))
)
