name: build

on:
  workflow_call:

jobs:
  build:
    name: build
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - aarch64-pc-windows-msvc
          - x86_64-pc-windows-msvc

        include:
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-22.04
            arch: aarch64
            vendor: unknown
            os: linux
            environment: gnu

          - target: x86_64-unknown-linux-gnu
            host: ubuntu-22.04
            arch: x86_64
            vendor: unknown
            os: linux
            environment: gnu

          - target: aarch64-unknown-linux-musl
            host: ubuntu-22.04
            arch: aarch64
            vendor: unknown
            os: linux
            environment: musl

          - target: x86_64-unknown-linux-musl
            host: ubuntu-22.04
            arch: x86_64
            vendor: unknown
            os: linux
            environment: musl

          - target: aarch64-apple-darwin
            host: macos-12
            arch: aarch64
            vendor: apple
            os: darwin
            environment: unknown

          - target: x86_64-apple-darwin
            host: macos-12
            arch: x86_64
            vendor: apple
            os: darwin
            environment: unknown

          - target: aarch64-pc-windows-msvc
            host: windows-2022
            arch: aarch64
            vendor: pc
            os: windows
            environment: msvc

          - target: x86_64-pc-windows-msvc
            host: windows-2022
            arch: x86_64
            vendor: pc
            os: windows
            environment: msvc

    runs-on: ${{ matrix.host }}
    steps:
    - name: Fetch repository
      uses: actions/checkout@v2

    - name: Check toolchain
      run: rustup show

    - name: Install target toolchain
      run: rustup target add ${{ matrix.target }}

    - name: Setup environment variables (darwin)
      if: matrix.os == 'darwin'
      shell: bash
      run: |
        NAME=wasmfmt
        echo BIN="target/${{ matrix.target }}/release/$NAME" >> $GITHUB_ENV
        echo DIST="$NAME-${{ matrix.target }}" >> $GITHUB_ENV
        echo ARCHIVE="$DIST.tar.gz" >> $GITHUB_ENV
        echo AR="tar czf" >> $GITHUB_ENV
        echo CARGO="cargo" >> $GITHUB_ENV

    - name: Setup environment variables (linux)
      if: matrix.os == 'linux'
      shell: bash
      run: |
        NAME=wasmfmt
        echo BIN="target/${{ matrix.target }}/release/$NAME" >> $GITHUB_ENV
        echo DIST="$NAME-${{ matrix.target }}" >> $GITHUB_ENV
        echo ARCHIVE="$DIST.tar.gz" >> $GITHUB_ENV
        echo AR="tar czf" >> $GITHUB_ENV
        echo CARGO="cargo" >> $GITHUB_ENV

    - name: Setup environment variables (windows)
      if: matrix.os == 'windows'
      shell: bash
      run: |
        NAME=wasmfmt
        echo BIN="target/${{ matrix.target }}/release/$NAME.exe" >> $GITHUB_ENV
        echo DIST="$NAME-${{ matrix.target }}" >> $GITHUB_ENV
        echo ARCHIVE="$DIST.zip" >> $GITHUB_ENV
        echo AR="7z a" >> $GITHUB_ENV
        echo CARGO="cargo" >> $GITHUB_ENV

    - name: Check environment variables
      shell: bash
      run: |
        echo "BIN: $BIN"
        echo "DIST: $DIST"
        echo "ARCHIVE: $ARCHIVE"
        echo "AR: $AR"
        echo "CARGO: $CARGO"

    - name: Setup compiler (aarch64/darwin)
      if: matrix.os == 'darwin' && matrix.arch == 'aarch64'
      shell: bash
      run: |
        xcrun -sdk macosx --show-sdk-path > /dev/null
        xcrun -sdk macosx --show-sdk-platform-version > /dev/null
        echo SDKROOT="$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
        echo "SDKROOT: $SDKROOT"
        echo MACOSX_DEPLOYMENT_TARGET="$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV
        echo "MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"

    - name: Setup compiler (aarch64/linux)
      if: matrix.os == 'linux' && matrix.arch == 'aarch64'
      run: cargo install cross

    - name: Build binary
      run: ${{ env.CARGO }} build --verbose --release --target ${{ matrix.target }}

    - name: Check binary
      run: file "$BIN"

    - name: Build archive
      shell: bash
      run: |
        mkdir -p "$DIST"
        cp "$BIN" "$DIST"
        ${{ env.AR }} "$ARCHIVE" "$DIST"

    - name: Upload archive
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARCHIVE }}
        path: ${{ env.ARCHIVE }}
